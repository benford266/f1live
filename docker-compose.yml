services:
  # Redis service (optional)
  f1-redis:
    image: redis:7-alpine
    container_name: f1-redis
    restart: unless-stopped
    # No port mapping needed - only internal access via Docker network
    command: redis-server --appendonly yes
    volumes:
      - f1-redis-data:/data
    networks:
      - f1-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Backend service
  f1-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: f1-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ./backend/.env.production
    environment:
      # Override Redis connection to ensure Docker network connectivity
      - REDIS_HOST=f1-redis
      - REDIS_PORT=6379
    depends_on:
      f1-redis:
        condition: service_healthy
    volumes:
      # Persist database and logs
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - f1-network
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend service
  f1-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: f1-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      f1-backend:
        condition: service_healthy
    networks:
      - f1-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

networks:
  f1-network:
    driver: bridge

volumes:
  f1-data:
  f1-logs:
  f1-redis-data: